{{- define "client_service_go" -}}
package {{.PackageName}}

{{$serviceiName := .Name}}
import (
	"encoding/json"
	"net/http"

    {{ range $k, $v := .LibImportPaths -}}
    "{{$k}}"
    {{end -}}
)

type {{.Name}} service


{{ range $k, $v := .Methods }}

{{if ne $v.RespBody "" }}
type {{$v.RespBody}} map[string]interface{}
{{end}}

{{ range $kf, $vf := $v.FuncComments }}
// {{$vf}} {{end}}
func (s *{{$serviceiName}}) {{$v.MethodName}}({{$v.Params}}){{$v.ReturnTypes}} {
    {{- if eq $v.Verb "GET" }}
		{{if ne $v.RespBody "" }} var u {{$v.RespBody}} {{end}}

        resp, err := s.client.doReqNoBody("GET", s.client.BaseURI {{if ne $v.ResourcePath "" }} + {{end}} {{$v.ResourcePath}}, headers, queryParams)
		if err != nil {
			{{if ne $v.RespBody "" }} return u, nil, err
			{{else}} return nil, err
			{{- end -}}
		}
		defer resp.Body.Close()

		{{if ne $v.RespBody "" }}
			return u, resp, json.NewDecoder(resp.Body).Decode(&u)
		{{else}}
			return resp, nil
		{{- end -}}
	{{else if eq $v.Verb "DELETE"}}
		// create request object
		return s.client.doReqNoBody("DELETE", s.client.BaseURI{{if ne $v.ResourcePath "" }} + {{end}} {{$v.ResourcePath}}, headers, queryParams)
	{{else}}
		{{if ne $v.RespBody "" }} var u {{$v.RespBody}} {{end}}

        resp, err := s.client.doReqWithBody("{{$v.Verb}}", s.client.BaseURI{{if ne $v.ResourcePath "" }} + {{end}}{{$v.ResourcePath}}, {{if ne $v.ReqBody ""}}&{{$v.ReqBody | ToLower}}{{else}}nil{{end}}, headers, queryParams)
		if err != nil {
			{{if ne $v.RespBody "" }} return u, nil, err
			{{else}} return nil, err
			{{- end -}}
		}
		defer resp.Body.Close()

		{{if ne $v.RespBody "" }}
			return u, resp, json.NewDecoder(resp.Body).Decode(&u)
		{{else}}
			return resp, nil
		{{- end -}}
	{{- end -}}

}
{{- end -}}

{{- end -}}
